介绍远程调用代理的设计和实现，介绍dubbo-rpc-api中的各种proxy包的源码。
一、简介
代理分为两种，静态代理和动态代理。
1、静态代理：如果代理类在程序运行前就已经存在，那么这种代理就是静态代理。
2、动态代理：代理类在程序运行时创建的代理方式。动态代理关系由两组静态代理关系组成，这就是动态代理的原理。

只有当消费者调用的时候，ProxyFactory才会通过Proxy把接口实现转化为invoker，并且在其他层的调用都使用的是invoker，
同样的道理，在服务提供者暴露服务的时候，也只有在最后暴露给消费者的时候才会通过Proxy 将 Invoker 转成接口。

动态代理的底层原理就是字节码技术，dubbo提供了两种方式来实现代理：
第一种jdk，jdk动态代理比较简单，它内置在JDK中，因此不依赖第三方jar包，但是功能相对较弱，当调用Proxy 的静态方法创建动态代理类时，类名格式是“$ProxyN”，N代表第 N 次生成的动态代理类，如果重复创建动态代理类会直接返回原先创建的代理类。但是这个以“\$ProxyN”命名的类是继承Proxy类的，并且实现了其所代理的一组接口，这里就出现了它的一个局限性，由于java的类只能单继承，所以JDK动态代理仅支持接口代理。
第二种是Javassist，Javassist是一款Java字节码引擎工具，能够在运行时编译生成class。该方法也是代理的默认方法。

二、AbstractProxyFactory
该类是代理工厂的抽象类，主要处理了一下需要代理的接口，然后把代理getProxy方法抽象出来。

三、AbstractProxyInvoker
该类实现了Invoker接口，是代理invoker对象的抽象类。

四、InvokerInvocationHandler
该类实现了InvocationHandler接口，动态代理类都必须要实现InvocationHandler接口，而该类实现的是对于基础方法不适用rpc调用，其他方法使用rpc调用。

五、StubProxyFactoryWrapper
该类实现了本地存根的逻辑，关于本地存根的概念和使用在官方文档中都有详细说明。

六、JdkProxyFactory
该类继承了AbstractProxyFactory，是jdk的代理工厂的主要逻辑。

七、JavassistProxyFactory
该类是基于Javassist实现的动态代理工厂类。

八、Proxy#getProxy()
org.apache.dubbo.common.bytecode.Proxy.getProxy()

九、org.apache.dubbo.common.bytecode.Wrapper.getWrapper
Wrapper是用于创建某个对象的方法调用的包装器，利用字节码技术在调用方法时进行编译相关方法。其中getWrapper就是获得Wrapper 对象，其中关键的是makeWrapper方法






















