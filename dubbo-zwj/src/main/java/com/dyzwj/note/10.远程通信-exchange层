介绍Exchange层的相关设计和逻辑、介绍dubbo-remoting-api中的exchange包内的源码解析。

一、Exchange层
上一篇文章我讲的是dubbo框架设计中Transport层，这篇文章我要讲的是它的上一层Exchange层，也就是信息交换层。
官方文档对这一层的解释是封装请求响应模式，同步转异步，以 Request, Response为中心，扩展接口为 Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer。

这一层的设计意图是什么？它应该算是在信息传输层上又做了部分装饰，为了适应rpc调用的一些需求，比如rpc调用中一次请求只关心它所对应的响应，
这个时候只是一个message消息传输过来，是无法区分这是新的请求还是上一个请求的响应，
这种类似于幂等性的问题以及rpc异步处理返回结果、内置事件等特性都是在Transport层无法解决满足的，所有在Exchange层讲message分成了request和response两种类型，
并且在这两个模型上增加一些系统字段来处理问题。具体我会在下面讲到。而dubbo把一条消息分为了协议头和内容两部分：协议头包括系统字段，例如编号等，内容包括具体请求的参数和响应的结果等。
在exchange层中大量逻辑都是基于协议头的。

二、ExchangeChannel

三、HeaderExchangeChannel
该类实现了ExchangeChannel，是基于协议头的信息交换通道。HeaderExchangeChannel是Channel的装饰器，每个实现方法都会调用channel的方法。

四、ExchangeClient
该接口继承了Client和ExchangeChannel，是信息交换客户端接口，其中没有定义多余的方法。


五、HeaderExchangeClient
　该类实现了ExchangeClient接口，是基于协议头的信息交互客户端类，同样它是Client、Channel的适配器。
在该类的源码中可以看到所有的实现方法都是调用了client和channel属性的方法。该类主要的作用就是增加了心跳功能，为什么要增加心跳功能呢，
对于长连接，一些拔网线等物理层的断开，会导致TCP的FIN消息来不及发送，对方收不到断开事件，那么就需要用到发送心跳包来检测连接是否断开。
consumer和provider断开，处理措施不一样，会分别做出重连和关闭通道的操作。

六、HeartbeatTimerTask
心跳任务

七、ReconnectTimerTask
重连任务

八、ResponseFuture
该接口是响应future接口，该接口的设计意图跟java.util.concurrent.Future很类似。发送出去的消息，泼出去的水，只有等到对方主动响应才能得到结果，但是请求方需要去主动回去该请求的结果，就显得有些艰难，所有产生了这样一个接口，它能够获取任务执行结果、可以核对请求消息是否被响应，还能设置回调来支持异步。

九、DefaultFuture
该类实现了ResponseFuture接口，其中封装了处理响应的逻辑。你可以把DefaultFuture看成是一个中介，买房和卖房都通过这个中介进行沟通，中介拥有着买房者的信息request和卖房者的信息response，并且促成他们之间的买卖。

十、ExchangeHandler
该接口继承了ChannelHandler, TelnetHandler接口，是信息交换处理器接口。

十一、ExchangeHandlerDispatcher

十二、ExchangeHandlerAdapter
该类继承了TelnetHandlerAdapter，实现了ExchangeHandler，是信息交换处理器的适配器类。

十三、ExchangeServer


十四、HeaderExchangeServer
该类实现了ExchangeServer接口，是基于协议头的信息交换服务器实现类，HeaderExchangeServer是Server的装饰器，每个实现方法都会调用server的方法。


十五、ExchangeServerDelegate
该类实现了ExchangeServer接口，是信息交换服务器装饰者，是ExchangeServer的装饰器。该类就一个属性ExchangeServer server，所有实现方法都调用了server属性的方法

十六、Exchanger
该接口是数据交换者接口，该接口是一个可扩展接口默认实现的是HeaderExchanger类，并且用到了dubbo SPI的Adaptive机制，优先实现url携带的配置

十七、HeaderExchanger
该类继承了Exchanger接口，是Exchanger接口的默认实现，实现了Exchanger接口定义的两个方法，分别调用的是Transporters的连接和绑定方法，再利用这这两个方法返回的客户端和服务端实例来创建信息交换的客户端和服务端。

十八、Replier
我们知道Request对应的是ExchangeHandler接口实现对象来处理，但有些时候我们需要不同数据类型对应不同的处理器，该类就是为了支持这一需求所设计的。

十九、ReplierDispatcher
该类实现了Replier接口，是回复者调度器实现类。


二十、HeartbeatHandler
该类继承了AbstractChannelHandlerDelegate类，是心跳处理器。是用来处理心跳事件的，也接收消息上增加了对心跳消息的处理


二十一、Request
请求模型类，最重要的肯定是模型的属性

二十二、Response


二十三、ExchangeCodec
该类继承了TelnetCodec，是信息交换编解码器。在本文的开头，我就写到，dubbo将一条消息分成了协议头和协议体，用来解决粘包拆包问题，但是头跟体在编解码上有区别，我们先来看看dubbo 的协议头的配置：
协议中各个数据所占的位数：

1、0-7位和8-15位：Magic High和Magic Low，类似java字节码文件里的魔数，用来判断是不是dubbo协议的数据包，就是一个固定的数字
2、16位：Req/Res：请求还是响应标识。
3、17位：2way：单向还是双向
4、18位：Event：是否是事件
5、19-23位：Serialization 编号
6、24-31位：status状态
7、32-95位：id编号
8、96-127位：body数据
9、128-…位：上图表格内的数据






